const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };

  const New_generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
   export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });

    export const New_AiCode = model.startChat({
      generationConfig: New_generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate to do app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags."},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"Task Manager App\",\n  \"explanation\": \"This project is a Task Manager application built with React and styled with Tailwind CSS. It features components for displaying a task list, adding new tasks, editing existing tasks, and viewing task details. The app utilizes lucide-react icons for visual elements and date-fns for date formatting. The application structure is modular, with components organized into separate folders for better maintainability and scalability. Chart.js library is used for data Visualization. It is designed to be a fully functional, production-ready task management tool.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList/TaskList';\\nimport TaskForm from './components/TaskForm/TaskForm';\\nimport TaskDetails from './components/TaskDetails/TaskDetails';\\nimport AnalyticsDashboard from './components/AnalyticsDashboard/AnalyticsDashboard';\\nimport { Home, ListChecks, PlusSquare, BarChart2 } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const storedTasks = localStorage.getItem('tasks');\\n    return storedTasks ? JSON.parse(storedTasks) : [];\\n  });\\n  const [selectedTask, setSelectedTask] = useState(null);\\n  const [view, setView] = useState('list'); // 'list', 'details', 'add'\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (task) => {\\n    setTasks([...tasks, task]);\\n    setView('list');\\n  };\\n\\n  const updateTask = (updatedTask) => {\\n    setTasks(\\n      tasks.map((task) => (task.id === updatedTask.id ? updatedTask : task))\\n    );\\n    setSelectedTask(updatedTask);\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter((task) => task.id !== id));\\n    setSelectedTask(null);\\n    setView('list');\\n  };\\n\\n  const handleTaskClick = (task) => {\\n    setSelectedTask(task);\\n    setView('details');\\n  };\\n\\n  const handleHomeClick = () => {\\n    setSelectedTask(null);\\n    setView('list');\\n  };\\n\\n  const navigateToAdd = () => {\\n    setView('add');\\n  };\\n\\n  const navigateToAnalytics = () => {\\n    setView('analytics');\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12\\\">\\n      <div className=\\\"relative py-3 sm:max-w-xl sm:mx-auto\\\">\\n        <div className=\\\"absolute inset-0 bg-gradient-to-r from-blue-300 to-blue-600 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl\\\"></div>\\n        <div className=\\\"relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20\\\">\\n          <div className=\\\"max-w-md mx-auto\\\">\\n            <div>\\n              <h1 className=\\\"text-2xl font-semibold text-gray-800 text-center\\\">Task Manager ðŸš€</h1>\\n            </div>\\n\\n            <div className=\\\"mt-6 flex justify-around\\\">\\n              <button onClick={handleHomeClick} className=\\\"text-blue-500 hover:text-blue-700 focus:outline-none\\\">\\n                <Home className=\\\"h-6 w-6\\\" />\\n                <span className=\\\"ml-2\\\">Home</span>\\n              </button>\\n              <button onClick={navigateToAdd} className=\\\"text-green-500 hover:text-green-700 focus:outline-none\\\">\\n                <PlusSquare className=\\\"h-6 w-6\\\" />\\n                <span className=\\\"ml-2\\\">Add Task</span>\\n              </button>\\n              <button onClick={navigateToAnalytics} className=\\\"text-purple-500 hover:text-purple-700 focus:outline-none\\\">\\n                <BarChart2 className=\\\"h-6 w-6\\\" />\\n                <span className=\\\"ml-2\\\">Analytics</span>\\n              </button>\\n            </div>\\n\\n            <div className=\\\"mt-8\\\">\\n              {view === 'list' && (\\n                <TaskList tasks={tasks} onTaskClick={handleTaskClick} deleteTask={deleteTask} />\\n              )}\\n              {view === 'details' && selectedTask && (\\n                <TaskDetails\\n                  task={selectedTask}\\n                  onUpdateTask={updateTask}\\n                  onDeleteTask={deleteTask}\\n                  onBack={() => setView('list')}\\n                />\\n              )}\\n              {view === 'add' && <TaskForm addTask={addTask} onCancel={() => setView('list')} />}\\n              {view === 'analytics' && <AnalyticsDashboard tasks={tasks} />}\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/components/TaskList/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport { format } from 'date-fns';\\nimport { Trash2, Edit } from 'lucide-react';\\n\\nfunction TaskList({ tasks, onTaskClick, deleteTask }) {\\n  return (\\n    <div>\\n      {tasks.length === 0 ? (\\n        <p className=\\\"text-gray-600 italic\\\">No tasks yet. Add one!</p>\\n      ) : (\\n        <ul className=\\\"divide-y divide-gray-200\\\">\\n          {tasks.map((task) => (\\n            <li key={task.id} className=\\\"py-4 flex items-center justify-between\\\">\\n              <button onClick={() => onTaskClick(task)} className=\\\"flex-grow text-left\\\">\\n                <h3 className=\\\"text-lg font-medium text-gray-800 hover:text-blue-600 focus:outline-none focus:text-blue-600\\\">\\n                  {task.title}\\n                </h3>\\n                <p className=\\\"text-sm text-gray-500\\\">Due: {format(new Date(task.dueDate), 'MMM dd, yyyy')}</p>\\n              </button>\\n              <div className=\\\"flex space-x-2\\\">\\n                <button\\n                  onClick={() => deleteTask(task.id)}\\n                  className=\\\"text-red-500 hover:text-red-700 focus:outline-none\\\"\\n                >\\n                  <Trash2 className=\\\"h-5 w-5\\\" />\\n                </button>\\n              </div>\\n            </li>\\n          ))}\\n        </ul>\\n      )}\\n    </div>\\n  );\\n}\\n\\nexport default TaskList;\\n\"\n    },\n    \"/components/TaskForm/TaskForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { v4 as uuidv4 } from 'uuid';\\nimport { format } from 'date-fns';\\nimport { ArrowLeft, Calendar } from 'lucide-react';\\n\\nfunction TaskForm({ addTask, onCancel }) {\\n  const [title, setTitle] = useState('');\\n  const [description, setDescription] = useState('');\\n  const [dueDate, setDueDate] = useState(format(new Date(), 'yyyy-MM-dd'));\\n  const [priority, setPriority] = useState('medium');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (title.trim() === '') {\\n      alert('Title cannot be empty');\\n      return;\\n    }\\n\\n    const newTask = {\\n      id: uuidv4(),\\n      title,\\n      description,\\n      dueDate,\\n      priority,\\n      completed: false,\\n    };\\n\\n    addTask(newTask);\\n    setTitle('');\\n    setDescription('');\\n    setDueDate(format(new Date(), 'yyyy-MM-dd'));\\n    setPriority('medium');\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"space-y-4\\\">\\n      <div>\\n        <label htmlFor=\\\"title\\\" className=\\\"block text-sm font-medium text-gray-700\\\">Title:</label>\\n        <input\\n          type=\\\"text\\\"\\n          id=\\\"title\\\"\\n          className=\\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\\\"\\n          value={title}\\n          onChange={(e) => setTitle(e.target.value)}\\n        />\\n      </div>\\n      <div>\\n        <label htmlFor=\\\"description\\\" className=\\\"block text-sm font-medium text-gray-700\\\">Description:</label>\\n        <textarea\\n          id=\\\"description\\\"\\n          rows=\\\"3\\\"\\n          className=\\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\\\"\\n          value={description}\\n          onChange={(e) => setDescription(e.target.value)}\\n        ></textarea>\\n      </div>\\n      <div>\\n        <label htmlFor=\\\"dueDate\\\" className=\\\"block text-sm font-medium text-gray-700\\\">Due Date:</label>\\n        <div className=\\\"relative\\\">\\n          <div className=\\\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\\\">\\n            <Calendar className=\\\"h-5 w-5 text-gray-400\\\" />\\n          </div>\\n          <input\\n            type=\\\"date\\\"\\n            id=\\\"dueDate\\\"\\n            className=\\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm pl-10\\\"\\n            value={dueDate}\\n            onChange={(e) => setDueDate(e.target.value)}\\n          />\\n        </div>\\n      </div>\\n      <div>\\n        <label htmlFor=\\\"priority\\\" className=\\\"block text-sm font-medium text-gray-700\\\">Priority:</label>\\n        <select\\n          id=\\\"priority\\\"\\n          className=\\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\\\"\\n          value={priority}\\n          onChange={(e) => setPriority(e.target.value)}\\n        >\\n          <option value=\\\"low\\\">Low</option>\\n          <option value=\\\"medium\\\">Medium</option>\\n          <option value=\\\"high\\\">High</option>\\n        </select>\\n      </div>\\n\\n      <div className=\\\"flex justify-between\\\">\\n        <button\\n          type=\\\"button\\\"\\n          onClick={onCancel}\\n          className=\\\"inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\\\"\\n        >\\n          <ArrowLeft className=\\\"h-5 w-5 mr-2\\\" />\\n          Cancel\\n        </button>\\n        <button\\n          type=\\\"submit\\\"\\n          className=\\\"inline-flex items-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\\\"\\n        >\\n          Add Task\\n        </button>\\n      </div>\\n    </form>\\n  );\\n}\\n\\nexport default TaskForm;\\n\"\n    },\n    \"/components/TaskDetails/TaskDetails.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { format } from 'date-fns';\\nimport { ArrowLeft, Trash2, Edit, Calendar } from 'lucide-react';\\n\\nfunction TaskDetails({ task, onUpdateTask, onDeleteTask, onBack }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editedTitle, setEditedTitle] = useState(task.title);\\n  const [editedDescription, setEditedDescription] = useState(task.description);\\n  const [editedDueDate, setEditedDueDate] = useState(task.dueDate);\\n  const [editedPriority, setEditedPriority] = useState(task.priority);\\n\\n  const handleSave = () => {\\n    const updatedTask = {\\n      ...task,\\n      title: editedTitle,\\n      description: editedDescription,\\n      dueDate: editedDueDate,\\n      priority: editedPriority,\\n    };\\n    onUpdateTask(updatedTask);\\n    setIsEditing(false);\\n  };\\n\\n  return (\\n    <div>\\n      <div className=\\\"mb-4\\\">\\n        <button\\n          onClick={onBack}\\n          className=\\\"inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\\\"\\n        >\\n          <ArrowLeft className=\\\"h-5 w-5 mr-2\\\" />\\n          Back to List\\n        </button>\\n      </div>\\n\\n      {isEditing ? (\\n        <div className=\\\"space-y-4\\\">\\n          <div>\\n            <label htmlFor=\\\"editTitle\\\" className=\\\"block text-sm font-medium text-gray-700\\\">Title:</label>\\n            <input\\n              type=\\\"text\\\"\\n              id=\\\"editTitle\\\"\\n              className=\\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\\\"\\n              value={editedTitle}\\n              onChange={(e) => setEditedTitle(e.target.value)}\\n            />\\n          </div>\\n          <div>\\n            <label htmlFor=\\\"editDescription\\\" className=\\\"block text-sm font-medium text-gray-700\\\">Description:</label>\\n            <textarea\\n              id=\\\"editDescription\\\"\\n              rows=\\\"3\\\"\\n              className=\\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\\\"\\n              value={editedDescription}\\n              onChange={(e) => setEditedDescription(e.target.value)}\\n            ></textarea>\\n          </div>\\n          <div>\\n            <label htmlFor=\\\"editDueDate\\\" className=\\\"block text-sm font-medium text-gray-700\\\">Due Date:</label>\\n            <div className=\\\"relative\\\">\\n              <div className=\\\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\\\">\\n                <Calendar className=\\\"h-5 w-5 text-gray-400\\\" />\\n              </div>\\n              <input\\n                type=\\\"date\\\"\\n                id=\\\"editDueDate\\\"\\n                className=\\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm pl-10\\\"\\n                value={editedDueDate}\\n                onChange={(e) => setEditedDueDate(e.target.value)}\\n              />\\n            </div>\\n          </div>\\n          <div>\\n            <label htmlFor=\\\"editPriority\\\" className=\\\"block text-sm font-medium text-gray-700\\\">Priority:</label>\\n            <select\\n              id=\\\"editPriority\\\"\\n              className=\\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\\\"\\n              value={editedPriority}\\n              onChange={(e) => setEditedPriority(e.target.value)}\\n            >\\n              <option value=\\\"low\\\">Low</option>\\n              <option value=\\\"medium\\\">Medium</option>\\n              <option value=\\\"high\\\">High</option>\\n            </select>\\n          </div>\\n\\n          <div className=\\\"flex justify-between\\\">\\n            <button\\n              type=\\\"button\\\"\\n              onClick={() => setIsEditing(false)}\\n              className=\\\"inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\\\"\\n            >\\n              Cancel\\n            </button>\\n            <button\\n              type=\\\"button\\\"\\n              onClick={handleSave}\\n              className=\\\"inline-flex items-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\\\"\\n            >\\n              Save\\n            </button>\\n          </div>\\n        </div>\\n      ) : (\\n        <div className=\\\"space-y-4\\\">\\n          <div>\\n            <h2 className=\\\"text-xl font-semibold text-gray-800\\\">{task.title}</h2>\\n          </div>\\n          <div>\\n            <p className=\\\"text-gray-600\\\">{task.description}</p>\\n          </div>\\n          <div>\\n            <p className=\\\"text-gray-600\\\">Due Date: {format(new Date(task.dueDate), 'MMM dd, yyyy')}</p>\\n          </div>\\n          <div>\\n            <p className=\\\"text-gray-600\\\">Priority: {task.priority}</p>\\n          </div>\\n\\n          <div className=\\\"flex justify-between\\\">\\n            <button\\n              onClick={() => setIsEditing(true)}\\n              className=\\\"inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\\\"\\n            >\\n              <Edit className=\\\"h-5 w-5 mr-2\\\" />\\n              Edit\\n            </button>\\n            <button\\n              onClick={() => onDeleteTask(task.id)}\\n              className=\\\"inline-flex items-center rounded-md border border-red-300 bg-red-100 px-4 py-2 text-sm font-medium text-red-700 shadow-sm hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2\\\"\\n            >\\n              <Trash2 className=\\\"h-5 w-5 mr-2\\\" />\\n              Delete\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n\\nexport default TaskDetails;\\n\"\n    },\n    \"/components/AnalyticsDashboard/AnalyticsDashboard.js\": {\n      \"code\": \"import React from 'react';\\nimport { Pie } from 'react-chartjs-2';\\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\\n\\nChartJS.register(ArcElement, Tooltip, Legend);\\n\\nfunction AnalyticsDashboard({ tasks }) {\\n  const priorityCounts = tasks.reduce(\\n    (acc, task) => {\\n      acc[task.priority]++;\\n      return acc;\\n    },\\n    { low: 0, medium: 0, high: 0 }\\n  );\\n\\n  const data = {\\n    labels: ['Low Priority', 'Medium Priority', 'High Priority'],\\n    datasets: [\\n      {\\n        label: 'Task Priorities',\\n        data: [priorityCounts.low, priorityCounts.medium, priorityCounts.high],\\n        backgroundColor: [\\n          'rgba(54, 162, 235, 0.8)', // blue\\n          'rgba(255, 206, 86, 0.8)', // yellow\\n          'rgba(255, 99, 132, 0.8)', // red\\n        ],\\n        borderWidth: 0,\\n      },\\n    ],\\n  };\\n\\n  const options = {\\n    responsive: true,\\n    maintainAspectRatio: false, // Allows the chart to resize freely\\n    plugins: {\\n      legend: {\\n        position: 'bottom',\\n      },\\n      title: {\\n        display: true,\\n        text: 'Task Priority Distribution',\\n        font: {\\n          size: 16,\\n        },\\n      },\\n    },\\n  };\\n\\n  return (\\n    <div className=\\\"p-4 bg-white rounded-lg shadow-md\\\">\\n      <h2 className=\\\"text-xl font-semibold mb-4\\\">Task Analytics ðŸ“Š</h2>\\n      <div style={{ height: '300px' }}>\\n        <Pie data={data} options={options} />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default AnalyticsDashboard;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TaskList/TaskList.js\",\n    \"/components/TaskForm/TaskForm.js\",\n    \"/components/TaskDetails/TaskDetails.js\",\n    \"/components/AnalyticsDashboard/AnalyticsDashboard.js\"\n  ]\n}\n```"},
          ],
        },
      ],
    })